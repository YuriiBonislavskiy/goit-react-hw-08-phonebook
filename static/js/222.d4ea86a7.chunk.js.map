{"version":3,"file":"static/js/222.d4ea86a7.chunk.js","mappings":"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","sources":["pages/register.jsx","validations/validationSchema.js"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { authOperations } from 'Redux/auth';\nimport {\n  CssBaseline,\n  Container,\n  Typography,\n  Grid,\n  Box,\n  TextField,\n  Button,\n  Link,\n} from '@mui/material';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { validationsRegisterForm } from 'validations/validationSchema';\n\nexport const Register = props => {\n  const initialValues = {\n    fname: '',\n    lname: '',\n    email: '',\n    password: '',\n  };\n  const schema = yup.object().shape(validationsRegisterForm);\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { fname, lname, email, password } = values;\n    const name = `${fname} ${lname}`;\n    dispatch(authOperations.register({ name, email, password }));\n    resetForm();\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <Box\n        sx={{\n          marginTop: 8,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign up\n        </Typography>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={schema}\n          onSubmit={handleSubmit}\n        >\n          {props => {\n            const {\n              values,\n              touched,\n              errors,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n            } = props;\n            return (\n              <form onSubmit={handleSubmit}>\n                <Grid container spacing={1} sx={{ mt: 2, mb: 2 }}>\n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      id=\"fname\"\n                      label=\"First Name\"\n                      value={values.fname}\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      helperText={touched.fname ? errors.fname : ''}\n                      error={touched.fname && Boolean(errors.fname)}\n                      margin=\"dense\"\n                      variant=\"outlined\"\n                      fullWidth\n                    />\n                  </Grid>\n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      id=\"lname\"\n                      label=\"Last Name\"\n                      value={values.lname}\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      helperText={touched.lname ? errors.lname : ''}\n                      error={touched.lname && Boolean(errors.lname)}\n                      margin=\"dense\"\n                      variant=\"outlined\"\n                      fullWidth\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      id=\"email\"\n                      label=\"Email\"\n                      type=\"email\"\n                      value={values.email}\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      helperText={touched.email ? errors.email : ''}\n                      error={touched.email && Boolean(errors.email)}\n                      margin=\"dense\"\n                      variant=\"outlined\"\n                      fullWidth\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      id=\"password\"\n                      label=\"Password\"\n                      type=\"password\"\n                      value={values.password}\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      helperText={touched.password ? errors.password : ''}\n                      error={touched.password && Boolean(errors.password)}\n                      margin=\"dense\"\n                      variant=\"outlined\"\n                      fullWidth\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Button\n                      type=\"submit\"\n                      fullWidth\n                      variant=\"contained\"\n                      sx={{ mt: 2 }}\n                      xs={12}\n                      sm={12}\n                    >\n                      Sign Up\n                    </Button>\n                  </Grid>\n                </Grid>\n              </form>\n            );\n          }}\n        </Formik>\n\n        <Grid container justifyContent=\"flex-end\">\n          <Grid item>\n            {/* <Typography component=\"h5\" variant=\"inherit\" color=\"inherit\"> */}\n            <Link href=\"login\" underline=\"hover\">\n              Already have an account? Sign in\n            </Link>\n            {/* </Typography> */}\n          </Grid>\n        </Grid>\n      </Box>\n    </Container>\n    // </ThemeProvider>\n  );\n};\n\nexport default Register;\n","import * as yup from 'yup';\n\nexport const validationsRegisterForm = {\n  fname: yup\n    .string()\n    .required('First name is required')\n    .trim()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Is not in correct format'\n    ),\n  lname: yup\n    .string()\n    .trim()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Is not in correct format'\n    ),\n  email: yup\n    .string()\n    .matches(\n      /^((([0-9A-Za-z]{1}[-0-9A-z.]{0,30}[0-9A-Za-z]?)|([0-9А-Яа-я]{1}[-0-9А-я.]{0,30}[0-9А-Яа-я]?))@([-A-Za-z]{1,}\\.){1,}[-A-Za-z]{2,})$/,\n      'Enter a valid email'\n    )\n    .email('Enter a valid email')\n    .required('Email is required'),\n  password: yup\n    .string()\n    .min(8, 'Password must contain at least 8 characters')\n    .required('Enter your password'),\n};\n\nexport const validationsLoginForm = {\n  email: yup\n    .string()\n    .matches(\n      /^((([0-9A-Za-z]{1}[-0-9A-z.]{0,30}[0-9A-Za-z]?)|([0-9А-Яа-я]{1}[-0-9А-я.]{0,30}[0-9А-Яа-я]?))@([-A-Za-z]{1,}\\.){1,}[-A-Za-z]{2,})$/,\n      'Enter a valid email'\n    )\n    .email('Enter a valid email')\n    .required('Email is required'),\n  password: yup\n    .string()\n    .min(8, 'Password must contain at least 8 characters')\n    .required('Enter your password'),\n};\n\nexport const validationsContactForm = {\n  fname: yup\n    .string()\n    .required('First name is required')\n    .trim()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Is not in correct format'\n    ),\n  lname: yup\n    .string()\n    .trim()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Is not in correct format'\n    ),\n      number: yup\n        .string()\n        .required('Required')\n        .trim()\n        .matches(\n          /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n          'Is not in correct format'\n        ),\n};\n"],"names":["Register","props","schema","yup","shape","validationsRegisterForm","dispatch","useDispatch","component","maxWidth","sx","marginTop","display","flexDirection","alignItems","variant","initialValues","fname","lname","email","password","validationSchema","onSubmit","values","resetForm","name","authOperations","touched","errors","handleChange","handleBlur","handleSubmit","container","spacing","mt","mb","item","xs","sm","id","label","value","onChange","onBlur","helperText","error","Boolean","margin","fullWidth","type","justifyContent","href","underline","required","trim","matches","min","validationsLoginForm","validationsContactForm","number"],"sourceRoot":""}